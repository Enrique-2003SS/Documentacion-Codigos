x=c(7625.313,1397.258, 556.572,274.384,234.896,234.742,144.19)
y=x*(1/11148.858)
y
100*y
x=c(7625.313,1397.258, 556.572,336.907,274.384,234.896,234.742,144.19)
y=x*(1/11148.858)
100*y
ueA=c(1475,1655,1767)
ueB=c(1117,1475,1655)
T=((ueA/ueB)-1)*100
T
itA=c(2329.628,3915.223,16725.000)
itB=c(854.650,2329.628,3915.223)
F=((itA/itB)-1)*100)
F
itA=c(2329.628,3915.223,16725.000)
itB=c(854.650,2329.628,3915.223)
F=((itA/itB)-1)*100
F
11338-9580
15733.062-3846.189
((15733.062/3846.189)-1)*100
q()
library(dplyr)
library(gapminder)
# Statistics of Europe countries for 2007
eu_stats <- gapminder %>%
filter(
continent == "Europe",
year == 2007
) %>%
group_by(country) %>%
summarise(
AvgLifeExp = mean(lifeExp),
AvgGdpPercap = mean(gdpPercap)
)
# Save the file as CSV
write.csv(eu_stats, "home/r-environment/eu_stats.csv", row.names = FALSE)
install.packages("dplyr")
library(dplyr)
install.packages("gapminder")
library(gapminder)
# Statistics of Europe countries for 2007
eu_stats <- gapminder %>%
filter(
continent == "Europe",
year == 2007
) %>%
group_by(country) %>%
summarise(
AvgLifeExp = mean(lifeExp),
AvgGdpPercap = mean(gdpPercap)
)
# Save the file as CSV
write.csv(eu_stats, "C:/Users/Admin/Documents/Chambahub/RRR/eu_stats.csv", row.names = FALSE)
#install.packages("dplyr")
library(dplyr)
#install.packages("gapminder")
library(gapminder)
# Statistics of Europe countries for 2007
eu_stats <- gapminder %>%
filter(
continent == "Europe",
year == 2007
) %>%
group_by(country) %>%
summarise(
AvgLifeExp = mean(lifeExp),
AvgGdpPercap = mean(gdpPercap)
)
# Save the file as CSV
write.csv(eu_stats, "C:/Users/Admin/Documents/Chambahub/RRR/eu_stats.csv", row.names = FALSE)
library(dplyr)
eu_stats=1000+12
print(eu_stats)
library(sf)
library(raster)
library(gdistance)
setwd("C:/Users/Admin/Documents/Chambahub/Documentacion-Codigos/Accesibilidad_Documentación/Inputs")#
uso_de_suelo=raster("uso_de_suelo_friccion.tif")
pendiente=raster("pendiente.tif")
carreteras=raster("Carreteras.tif")
extent(carreteras)==extent(pendiente) &
extent(uso_de_suelo)==extent(pendiente)
#Sí me voy a tomar la libertad de actualizar los valores del raster que estén cerca de 90 grados
pendiente[pendiente<95.9 & pendiente>=90]=95.9
pendiente[pendiente<=90 & pendiente>84.9]=84.9
####Accesibilidad a pie
slp_walk = 6 * exp(-0.4 * abs(tan(pendiente * pi / 180) + 0.05))  # Calcula la velocidad de caminata ajustada por la pendiente.
#plot(-90:90,6*exp(-0.4*abs(tan(-90:90*pi/180)))+0.05,'l',ylab='Velocidad km/h',main='Velocidad caminando en función de la pendiente',xlab='Grados')
terrain_walk_spd = uso_de_suelo * slp_walk       #Le quité el /5.0. Quiero pensar que es la velocidad de caminata según uso de suelo. El promedio es de 5.5 km/h         # Calcula la velocidad sobre el terreno ajustada por la pendiente y el uso de suelo.
#plot(NA,xlim=extent(terrain_walk_spd)[c(1,2)],
#ylim=extent(terrain_walk_spd)[c(3,4)],main='Velocidad caminando\n en función de la pendiente y fricción del uso de suelo')
#plot(terrain_walk_spd,add=T)
##########Accesibilidad por carreteras
slp_car = 50 * exp(-0.4 * abs(tan(pendiente * pi / 180) + 0.12))  # Calcula la velocidad sobre carreteras ajustada por la pendiente.
#plot(-90:90,50 * exp(-0.4 * abs(tan(-90:90 * pi / 180) + 0.12)),'l',ylab='Velocidad km/h',main='Velocidad en auto en función de la pendiente',xlab='Grados')
# Carga un raster de carreteras y multiplica por 10 para definir velocidad.
#plot(NA,xlim=extent(slp_car)[c(1,2)],
#ylim=extent(slp_car)[c(3,4)],main='Velocidad en auto\n en función de la pendiente')
#plot(slp_car,add=T)
sloped_road_spd = carreteras * slp_car / 50.0 # Calcula la velocidad ajustada por pendiente para carreteras y la convierte en un raster.
merged_spd = merge(sloped_road_spd, terrain_walk_spd)     # Combina los rasters de velocidad de carreteras y terreno.
friction = 1.0 / (merged_spd * 1000 / 60.0 )
#plot(friction)
#install.packages("gdistance")
#library(gdistance)
Trans = transition(friction, function(x) 1 / mean(x), 8)  # Crea una matriz de transición basada en la fricción.
T.GC = geoCorrection(Trans, type="c")
hidalgo=st_read("hidalgo/LIM_MUNICIPALES.shp")
n=15
lugares_destino_ficticios=st_sample(hidalgo$geometry,n)
tiempo_zona = accCost(T.GC, matrix(unlist(lugares_destino_ficticios),nrow = n,ncol = 2,byrow = T))  # Calcula el costo acumulado desde un punto de inicio (coordenadas especificadas) usando la matriz de transición corregida (T.GC).
plot(tiempo_zona)
plot(lugares_destino_ficticios,add=TRUE)
